// Code generated by ZEBRAPACK (github.com/glycerine/zebrapack). DO NOT EDIT.

package zebra

import (
	"github.com/glycerine/zebrapack/msgp"
)

// ZebraDecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Field) ZebraDecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_a6e93beb7c64bda8_1 = 11

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields0zgensym_a6e93beb7c64bda8_1 uint32
	totalEncodedFields0zgensym_a6e93beb7c64bda8_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_a6e93beb7c64bda8_1 := totalEncodedFields0zgensym_a6e93beb7c64bda8_1
	missingFieldsLeft0zgensym_a6e93beb7c64bda8_1 := maxFields0zgensym_a6e93beb7c64bda8_1 - totalEncodedFields0zgensym_a6e93beb7c64bda8_1

	var nextMiss0zgensym_a6e93beb7c64bda8_1 int = -1
	var found0zgensym_a6e93beb7c64bda8_1 [maxFields0zgensym_a6e93beb7c64bda8_1]bool
	var curField0zgensym_a6e93beb7c64bda8_1 int

doneWithStruct0zgensym_a6e93beb7c64bda8_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_a6e93beb7c64bda8_1 > 0 || missingFieldsLeft0zgensym_a6e93beb7c64bda8_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_a6e93beb7c64bda8_1, missingFieldsLeft0zgensym_a6e93beb7c64bda8_1, msgp.ShowFound(found0zgensym_a6e93beb7c64bda8_1[:]), decodeMsgFieldOrder0zgensym_a6e93beb7c64bda8_1)
		if encodedFieldsLeft0zgensym_a6e93beb7c64bda8_1 > 0 {
			encodedFieldsLeft0zgensym_a6e93beb7c64bda8_1--
			curField0zgensym_a6e93beb7c64bda8_1, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss0zgensym_a6e93beb7c64bda8_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_a6e93beb7c64bda8_1 = 0
			}
			for nextMiss0zgensym_a6e93beb7c64bda8_1 < maxFields0zgensym_a6e93beb7c64bda8_1 && (found0zgensym_a6e93beb7c64bda8_1[nextMiss0zgensym_a6e93beb7c64bda8_1] || decodeMsgFieldSkip0zgensym_a6e93beb7c64bda8_1[nextMiss0zgensym_a6e93beb7c64bda8_1]) {
				nextMiss0zgensym_a6e93beb7c64bda8_1++
			}
			if nextMiss0zgensym_a6e93beb7c64bda8_1 == maxFields0zgensym_a6e93beb7c64bda8_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_a6e93beb7c64bda8_1
			}
			missingFieldsLeft0zgensym_a6e93beb7c64bda8_1--
			curField0zgensym_a6e93beb7c64bda8_1 = nextMiss0zgensym_a6e93beb7c64bda8_1
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_a6e93beb7c64bda8_1)
		switch curField0zgensym_a6e93beb7c64bda8_1 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "Zid"
			found0zgensym_a6e93beb7c64bda8_1[0] = true
			z.Zid, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "FieldGoName"
			found0zgensym_a6e93beb7c64bda8_1[1] = true
			z.FieldGoName, err = dc.ReadString()
			if err != nil {
				return
			}
		case 2:
			// zid 2 for "FieldTagName"
			found0zgensym_a6e93beb7c64bda8_1[2] = true
			z.FieldTagName, err = dc.ReadString()
			if err != nil {
				return
			}
		case 3:
			// zid 3 for "FieldTypeStr"
			found0zgensym_a6e93beb7c64bda8_1[3] = true
			z.FieldTypeStr, err = dc.ReadString()
			if err != nil {
				return
			}
		case 4:
			// zid 4 for "FieldCategory"
			found0zgensym_a6e93beb7c64bda8_1[4] = true
			{
				var zgensym_a6e93beb7c64bda8_2 uint64
				zgensym_a6e93beb7c64bda8_2, err = dc.ReadUint64()
				z.FieldCategory = Zkind(zgensym_a6e93beb7c64bda8_2)
			}
			if err != nil {
				return
			}
		case 5:
			// zid 5 for "FieldPrimitive"
			found0zgensym_a6e93beb7c64bda8_1[5] = true
			{
				var zgensym_a6e93beb7c64bda8_3 uint64
				zgensym_a6e93beb7c64bda8_3, err = dc.ReadUint64()
				z.FieldPrimitive = Zkind(zgensym_a6e93beb7c64bda8_3)
			}
			if err != nil {
				return
			}
		case 6:
			// zid 6 for "FieldFullType"
			found0zgensym_a6e93beb7c64bda8_1[6] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.FieldFullType != nil {
					dc.PushAlwaysNil()
					err = z.FieldFullType.ZebraDecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.FieldFullType == nil {
					z.FieldFullType = new(Ztype)
				}
				err = z.FieldFullType.ZebraDecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case 7:
			// zid 7 for "OmitEmpty"
			found0zgensym_a6e93beb7c64bda8_1[7] = true
			z.OmitEmpty, err = dc.ReadBool()
			if err != nil {
				return
			}
		case 8:
			// zid 8 for "Skip"
			found0zgensym_a6e93beb7c64bda8_1[8] = true
			z.Skip, err = dc.ReadBool()
			if err != nil {
				return
			}
		case 9:
			// zid 9 for "Deprecated"
			found0zgensym_a6e93beb7c64bda8_1[9] = true
			z.Deprecated, err = dc.ReadBool()
			if err != nil {
				return
			}
		case 10:
			// zid 10 for "ShowZero"
			found0zgensym_a6e93beb7c64bda8_1[10] = true
			z.ShowZero, err = dc.ReadBool()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_a6e93beb7c64bda8_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Field
var decodeMsgFieldOrder0zgensym_a6e93beb7c64bda8_1 = []string{"Zid", "FieldGoName", "FieldTagName", "FieldTypeStr", "FieldCategory", "FieldPrimitive", "FieldFullType", "OmitEmpty", "Skip", "Deprecated", "ShowZero"}

var decodeMsgFieldSkip0zgensym_a6e93beb7c64bda8_1 = []bool{false, false, false, false, false, false, false, false, false, false, false}

// ZebrafieldsNotEmpty supports omitempty tags
func (z *Field) ZebrafieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 11
	}
	var fieldsInUse uint32 = 11
	isempty[0] = (z.Zid == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.FieldGoName) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.FieldTagName) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.FieldTypeStr) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.FieldCategory == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.FieldPrimitive == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.FieldFullType == nil) // pointer, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (!z.OmitEmpty) // bool, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (!z.Skip) // bool, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (!z.Deprecated) // bool, omitempty
	if isempty[9] {
		fieldsInUse--
	}
	isempty[10] = (!z.ShowZero) // bool, omitempty
	if isempty[10] {
		fieldsInUse--
	}

	return fieldsInUse
}

// ZebraEncodeMsg implements msgp.Encodable
func (z *Field) ZebraEncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_a6e93beb7c64bda8_4 [11]bool
	fieldsInUse_zgensym_a6e93beb7c64bda8_5 := z.fieldsNotEmpty(empty_zgensym_a6e93beb7c64bda8_4[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_a6e93beb7c64bda8_5 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Field'
	err = en.Append(0xff)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x46, 0x69, 0x65, 0x6c, 0x64})
	if err != nil {
		return err
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[0] {
		// zid 0 for "Zid"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Zid)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[1] {
		// zid 1 for "FieldGoName"
		err = en.Append(0x1)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FieldGoName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[2] {
		// zid 2 for "FieldTagName"
		err = en.Append(0x2)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FieldTagName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[3] {
		// zid 3 for "FieldTypeStr"
		err = en.Append(0x3)
		if err != nil {
			return err
		}
		err = en.WriteString(z.FieldTypeStr)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[4] {
		// zid 4 for "FieldCategory"
		err = en.Append(0x4)
		if err != nil {
			return err
		}
		err = en.WriteUint64(uint64(z.FieldCategory))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[5] {
		// zid 5 for "FieldPrimitive"
		err = en.Append(0x5)
		if err != nil {
			return err
		}
		err = en.WriteUint64(uint64(z.FieldPrimitive))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[6] {
		// zid 6 for "FieldFullType"
		err = en.Append(0x6)
		if err != nil {
			return err
		}
		if z.FieldFullType == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.FieldFullType.ZebraEncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[7] {
		// zid 7 for "OmitEmpty"
		err = en.Append(0x7)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.OmitEmpty)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[8] {
		// zid 8 for "Skip"
		err = en.Append(0x8)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Skip)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[9] {
		// zid 9 for "Deprecated"
		err = en.Append(0x9)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.Deprecated)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_4[10] {
		// zid 10 for "ShowZero"
		err = en.Append(0xa)
		if err != nil {
			return err
		}
		err = en.WriteBool(z.ShowZero)
		if err != nil {
			return
		}
	}

	return
}

// ZebraMarshalMsg implements msgp.Marshaler
func (z *Field) ZebraMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.ZebraMsgsize())

	// honor the omitempty tags
	var empty [11]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse+1)

	// runtime struct type identification for 'Field'
	o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x46, 0x69, 0x65, 0x6c, 0x64})

	if !empty[0] {
		// zid 0 for "Zid"
		o = append(o, 0x0)
		o = msgp.AppendInt64(o, z.Zid)
	}

	if !empty[1] {
		// zid 1 for "FieldGoName"
		o = append(o, 0x1)
		o = msgp.AppendString(o, z.FieldGoName)
	}

	if !empty[2] {
		// zid 2 for "FieldTagName"
		o = append(o, 0x2)
		o = msgp.AppendString(o, z.FieldTagName)
	}

	if !empty[3] {
		// zid 3 for "FieldTypeStr"
		o = append(o, 0x3)
		o = msgp.AppendString(o, z.FieldTypeStr)
	}

	if !empty[4] {
		// zid 4 for "FieldCategory"
		o = append(o, 0x4)
		o = msgp.AppendUint64(o, uint64(z.FieldCategory))
	}

	if !empty[5] {
		// zid 5 for "FieldPrimitive"
		o = append(o, 0x5)
		o = msgp.AppendUint64(o, uint64(z.FieldPrimitive))
	}

	if !empty[6] {
		// zid 6 for "FieldFullType"
		o = append(o, 0x6)
		if z.FieldFullType == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.FieldFullType.ZebraMarshalMsg(o)
			if err != nil {
				return
			}
		}
	}

	if !empty[7] {
		// zid 7 for "OmitEmpty"
		o = append(o, 0x7)
		o = msgp.AppendBool(o, z.OmitEmpty)
	}

	if !empty[8] {
		// zid 8 for "Skip"
		o = append(o, 0x8)
		o = msgp.AppendBool(o, z.Skip)
	}

	if !empty[9] {
		// zid 9 for "Deprecated"
		o = append(o, 0x9)
		o = msgp.AppendBool(o, z.Deprecated)
	}

	if !empty[10] {
		// zid 10 for "ShowZero"
		o = append(o, 0xa)
		o = msgp.AppendBool(o, z.ShowZero)
	}

	return
}

// ZebraUnmarshalMsg implements msgp.Unmarshaler
func (z *Field) ZebraUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.ZebraUnmarshalMsgWithCfg(bts, nil)
}
func (z *Field) ZebraUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields6zgensym_a6e93beb7c64bda8_7 = 11

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields6zgensym_a6e93beb7c64bda8_7 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields6zgensym_a6e93beb7c64bda8_7, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft6zgensym_a6e93beb7c64bda8_7 := totalEncodedFields6zgensym_a6e93beb7c64bda8_7
	missingFieldsLeft6zgensym_a6e93beb7c64bda8_7 := maxFields6zgensym_a6e93beb7c64bda8_7 - totalEncodedFields6zgensym_a6e93beb7c64bda8_7

	var nextMiss6zgensym_a6e93beb7c64bda8_7 int = -1
	var found6zgensym_a6e93beb7c64bda8_7 [maxFields6zgensym_a6e93beb7c64bda8_7]bool
	var curField6zgensym_a6e93beb7c64bda8_7 int

doneWithStruct6zgensym_a6e93beb7c64bda8_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_a6e93beb7c64bda8_7 > 0 || missingFieldsLeft6zgensym_a6e93beb7c64bda8_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_a6e93beb7c64bda8_7, missingFieldsLeft6zgensym_a6e93beb7c64bda8_7, msgp.ShowFound(found6zgensym_a6e93beb7c64bda8_7[:]), unmarshalMsgFieldOrder6zgensym_a6e93beb7c64bda8_7)
		if encodedFieldsLeft6zgensym_a6e93beb7c64bda8_7 > 0 {
			encodedFieldsLeft6zgensym_a6e93beb7c64bda8_7--
			curField6zgensym_a6e93beb7c64bda8_7, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss6zgensym_a6e93beb7c64bda8_7 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss6zgensym_a6e93beb7c64bda8_7 = 0
			}
			for nextMiss6zgensym_a6e93beb7c64bda8_7 < maxFields6zgensym_a6e93beb7c64bda8_7 && (found6zgensym_a6e93beb7c64bda8_7[nextMiss6zgensym_a6e93beb7c64bda8_7] || unmarshalMsgFieldSkip6zgensym_a6e93beb7c64bda8_7[nextMiss6zgensym_a6e93beb7c64bda8_7]) {
				nextMiss6zgensym_a6e93beb7c64bda8_7++
			}
			if nextMiss6zgensym_a6e93beb7c64bda8_7 == maxFields6zgensym_a6e93beb7c64bda8_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_a6e93beb7c64bda8_7
			}
			missingFieldsLeft6zgensym_a6e93beb7c64bda8_7--
			curField6zgensym_a6e93beb7c64bda8_7 = nextMiss6zgensym_a6e93beb7c64bda8_7
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_a6e93beb7c64bda8_7)
		switch curField6zgensym_a6e93beb7c64bda8_7 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "Zid"
			found6zgensym_a6e93beb7c64bda8_7[0] = true
			z.Zid, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case 1:
			// zid 1 for "FieldGoName"
			found6zgensym_a6e93beb7c64bda8_7[1] = true
			z.FieldGoName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 2:
			// zid 2 for "FieldTagName"
			found6zgensym_a6e93beb7c64bda8_7[2] = true
			z.FieldTagName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 3:
			// zid 3 for "FieldTypeStr"
			found6zgensym_a6e93beb7c64bda8_7[3] = true
			z.FieldTypeStr, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 4:
			// zid 4 for "FieldCategory"
			found6zgensym_a6e93beb7c64bda8_7[4] = true
			{
				var zgensym_a6e93beb7c64bda8_8 uint64
				zgensym_a6e93beb7c64bda8_8, bts, err = nbs.ReadUint64Bytes(bts)

				if err != nil {
					return
				}
				z.FieldCategory = Zkind(zgensym_a6e93beb7c64bda8_8)
			}
		case 5:
			// zid 5 for "FieldPrimitive"
			found6zgensym_a6e93beb7c64bda8_7[5] = true
			{
				var zgensym_a6e93beb7c64bda8_9 uint64
				zgensym_a6e93beb7c64bda8_9, bts, err = nbs.ReadUint64Bytes(bts)

				if err != nil {
					return
				}
				z.FieldPrimitive = Zkind(zgensym_a6e93beb7c64bda8_9)
			}
		case 6:
			// zid 6 for "FieldFullType"
			found6zgensym_a6e93beb7c64bda8_7[6] = true
			if nbs.AlwaysNil {
				if z.FieldFullType != nil {
					z.FieldFullType.ZebraUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.FieldFullType {
						z.FieldFullType.ZebraUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.FieldFullType == nil {
						z.FieldFullType = new(Ztype)
					}
					bts, err = z.FieldFullType.ZebraUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		case 7:
			// zid 7 for "OmitEmpty"
			found6zgensym_a6e93beb7c64bda8_7[7] = true
			z.OmitEmpty, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case 8:
			// zid 8 for "Skip"
			found6zgensym_a6e93beb7c64bda8_7[8] = true
			z.Skip, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case 9:
			// zid 9 for "Deprecated"
			found6zgensym_a6e93beb7c64bda8_7[9] = true
			z.Deprecated, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		case 10:
			// zid 10 for "ShowZero"
			found6zgensym_a6e93beb7c64bda8_7[10] = true
			z.ShowZero, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_a6e93beb7c64bda8_7 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Field
var unmarshalMsgFieldOrder6zgensym_a6e93beb7c64bda8_7 = []string{"Zid", "FieldGoName", "FieldTagName", "FieldTypeStr", "FieldCategory", "FieldPrimitive", "FieldFullType", "OmitEmpty", "Skip", "Deprecated", "ShowZero"}

var unmarshalMsgFieldSkip6zgensym_a6e93beb7c64bda8_7 = []bool{false, false, false, false, false, false, false, false, false, false, false}

// ZebraMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Field) ZebraMsgsize() (s int) {
	s = 1 + 9 + msgp.Int64Size + 9 + msgp.StringPrefixSize + len(z.FieldGoName) + 9 + msgp.StringPrefixSize + len(z.FieldTagName) + 9 + msgp.StringPrefixSize + len(z.FieldTypeStr) + 9 + msgp.Uint64Size + 9 + msgp.Uint64Size + 9
	if z.FieldFullType == nil {
		s += msgp.NilSize
	} else {
		s += z.FieldFullType.ZebraMsgsize()
	}
	s += 9 + msgp.BoolSize + 9 + msgp.BoolSize + 9 + msgp.BoolSize + 9 + msgp.BoolSize
	return
}

// ZebraDecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Schema) ZebraDecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields14zgensym_a6e93beb7c64bda8_15 = 5

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields14zgensym_a6e93beb7c64bda8_15 uint32
	totalEncodedFields14zgensym_a6e93beb7c64bda8_15, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft14zgensym_a6e93beb7c64bda8_15 := totalEncodedFields14zgensym_a6e93beb7c64bda8_15
	missingFieldsLeft14zgensym_a6e93beb7c64bda8_15 := maxFields14zgensym_a6e93beb7c64bda8_15 - totalEncodedFields14zgensym_a6e93beb7c64bda8_15

	var nextMiss14zgensym_a6e93beb7c64bda8_15 int = -1
	var found14zgensym_a6e93beb7c64bda8_15 [maxFields14zgensym_a6e93beb7c64bda8_15]bool
	var curField14zgensym_a6e93beb7c64bda8_15 int

doneWithStruct14zgensym_a6e93beb7c64bda8_15:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft14zgensym_a6e93beb7c64bda8_15 > 0 || missingFieldsLeft14zgensym_a6e93beb7c64bda8_15 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft14zgensym_a6e93beb7c64bda8_15, missingFieldsLeft14zgensym_a6e93beb7c64bda8_15, msgp.ShowFound(found14zgensym_a6e93beb7c64bda8_15[:]), decodeMsgFieldOrder14zgensym_a6e93beb7c64bda8_15)
		if encodedFieldsLeft14zgensym_a6e93beb7c64bda8_15 > 0 {
			encodedFieldsLeft14zgensym_a6e93beb7c64bda8_15--
			curField14zgensym_a6e93beb7c64bda8_15, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss14zgensym_a6e93beb7c64bda8_15 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss14zgensym_a6e93beb7c64bda8_15 = 0
			}
			for nextMiss14zgensym_a6e93beb7c64bda8_15 < maxFields14zgensym_a6e93beb7c64bda8_15 && (found14zgensym_a6e93beb7c64bda8_15[nextMiss14zgensym_a6e93beb7c64bda8_15] || decodeMsgFieldSkip14zgensym_a6e93beb7c64bda8_15[nextMiss14zgensym_a6e93beb7c64bda8_15]) {
				nextMiss14zgensym_a6e93beb7c64bda8_15++
			}
			if nextMiss14zgensym_a6e93beb7c64bda8_15 == maxFields14zgensym_a6e93beb7c64bda8_15 {
				// filled all the empty fields!
				break doneWithStruct14zgensym_a6e93beb7c64bda8_15
			}
			missingFieldsLeft14zgensym_a6e93beb7c64bda8_15--
			curField14zgensym_a6e93beb7c64bda8_15 = nextMiss14zgensym_a6e93beb7c64bda8_15
		}
		//fmt.Printf("switching on curField: '%v'\n", curField14zgensym_a6e93beb7c64bda8_15)
		switch curField14zgensym_a6e93beb7c64bda8_15 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "SourcePath"
			found14zgensym_a6e93beb7c64bda8_15[0] = true
			z.SourcePath, err = dc.ReadString()
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "SourcePackage"
			found14zgensym_a6e93beb7c64bda8_15[1] = true
			z.SourcePackage, err = dc.ReadString()
			if err != nil {
				return
			}
		case 2:
			// zid 2 for "ZebraSchemaId"
			found14zgensym_a6e93beb7c64bda8_15[2] = true
			z.ZebraSchemaId, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case 3:
			// zid 3 for "Structs"
			found14zgensym_a6e93beb7c64bda8_15[3] = true
			var zgensym_a6e93beb7c64bda8_16 uint32
			zgensym_a6e93beb7c64bda8_16, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Structs == nil && zgensym_a6e93beb7c64bda8_16 > 0 {
				z.Structs = make(map[string]*Struct, zgensym_a6e93beb7c64bda8_16)
			} else if len(z.Structs) > 0 {
				for key, _ := range z.Structs {
					delete(z.Structs, key)
				}
			}
			for zgensym_a6e93beb7c64bda8_16 > 0 {
				zgensym_a6e93beb7c64bda8_16--
				var zgensym_a6e93beb7c64bda8_10 string
				var zgensym_a6e93beb7c64bda8_11 *Struct
				zgensym_a6e93beb7c64bda8_10, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}

					zgensym_a6e93beb7c64bda8_11 = nil
				} else {
					if zgensym_a6e93beb7c64bda8_11 == nil {
						zgensym_a6e93beb7c64bda8_11 = new(Struct)
					}
					const maxFields17zgensym_a6e93beb7c64bda8_18 = 2

					// -- templateDecodeMsgZid starts here--
					var totalEncodedFields17zgensym_a6e93beb7c64bda8_18 uint32
					totalEncodedFields17zgensym_a6e93beb7c64bda8_18, err = dc.ReadMapHeader()
					if err != nil {
						return
					}
					encodedFieldsLeft17zgensym_a6e93beb7c64bda8_18 := totalEncodedFields17zgensym_a6e93beb7c64bda8_18
					missingFieldsLeft17zgensym_a6e93beb7c64bda8_18 := maxFields17zgensym_a6e93beb7c64bda8_18 - totalEncodedFields17zgensym_a6e93beb7c64bda8_18

					var nextMiss17zgensym_a6e93beb7c64bda8_18 int = -1
					var found17zgensym_a6e93beb7c64bda8_18 [maxFields17zgensym_a6e93beb7c64bda8_18]bool
					var curField17zgensym_a6e93beb7c64bda8_18 int

				doneWithStruct17zgensym_a6e93beb7c64bda8_18:
					// First fill all the encoded fields, then
					// treat the remaining, missing fields, as Nil.
					for encodedFieldsLeft17zgensym_a6e93beb7c64bda8_18 > 0 || missingFieldsLeft17zgensym_a6e93beb7c64bda8_18 > 0 {
						//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft17zgensym_a6e93beb7c64bda8_18, missingFieldsLeft17zgensym_a6e93beb7c64bda8_18, msgp.ShowFound(found17zgensym_a6e93beb7c64bda8_18[:]), decodeMsgFieldOrder17zgensym_a6e93beb7c64bda8_18)
						if encodedFieldsLeft17zgensym_a6e93beb7c64bda8_18 > 0 {
							encodedFieldsLeft17zgensym_a6e93beb7c64bda8_18--
							curField17zgensym_a6e93beb7c64bda8_18, err = dc.ReadInt()
							if err != nil {
								return
							}
						} else {
							//missing fields need handling
							if nextMiss17zgensym_a6e93beb7c64bda8_18 < 0 {
								// tell the reader to only give us Nils
								// until further notice.
								dc.PushAlwaysNil()
								nextMiss17zgensym_a6e93beb7c64bda8_18 = 0
							}
							for nextMiss17zgensym_a6e93beb7c64bda8_18 < maxFields17zgensym_a6e93beb7c64bda8_18 && (found17zgensym_a6e93beb7c64bda8_18[nextMiss17zgensym_a6e93beb7c64bda8_18] || decodeMsgFieldSkip17zgensym_a6e93beb7c64bda8_18[nextMiss17zgensym_a6e93beb7c64bda8_18]) {
								nextMiss17zgensym_a6e93beb7c64bda8_18++
							}
							if nextMiss17zgensym_a6e93beb7c64bda8_18 == maxFields17zgensym_a6e93beb7c64bda8_18 {
								// filled all the empty fields!
								break doneWithStruct17zgensym_a6e93beb7c64bda8_18
							}
							missingFieldsLeft17zgensym_a6e93beb7c64bda8_18--
							curField17zgensym_a6e93beb7c64bda8_18 = nextMiss17zgensym_a6e93beb7c64bda8_18
						}
						//fmt.Printf("switching on curField: '%v'\n", curField17zgensym_a6e93beb7c64bda8_18)
						switch curField17zgensym_a6e93beb7c64bda8_18 {
						// -- templateDecodeMsgZid ends here --

						case 0:
							// zid 0 for "StructName"
							found17zgensym_a6e93beb7c64bda8_18[0] = true
							zgensym_a6e93beb7c64bda8_11.StructName, err = dc.ReadString()
							if err != nil {
								return
							}
						case 1:
							// zid 1 for "Fields"
							found17zgensym_a6e93beb7c64bda8_18[1] = true
							var zgensym_a6e93beb7c64bda8_19 uint32
							zgensym_a6e93beb7c64bda8_19, err = dc.ReadArrayHeader()
							if err != nil {
								return
							}
							if cap(zgensym_a6e93beb7c64bda8_11.Fields) >= int(zgensym_a6e93beb7c64bda8_19) {
								zgensym_a6e93beb7c64bda8_11.Fields = (zgensym_a6e93beb7c64bda8_11.Fields)[:zgensym_a6e93beb7c64bda8_19]
							} else {
								zgensym_a6e93beb7c64bda8_11.Fields = make([]Field, zgensym_a6e93beb7c64bda8_19)
							}
							for zgensym_a6e93beb7c64bda8_12 := range zgensym_a6e93beb7c64bda8_11.Fields {
								err = zgensym_a6e93beb7c64bda8_11.Fields[zgensym_a6e93beb7c64bda8_12].ZebraDecodeMsg(dc)
								if err != nil {
									return
								}
							}
						default:
							err = dc.Skip()
							if err != nil {
								return
							}
						}
					}
					if nextMiss17zgensym_a6e93beb7c64bda8_18 != -1 {
						dc.PopAlwaysNil()
					}

				}
				z.Structs[zgensym_a6e93beb7c64bda8_10] = zgensym_a6e93beb7c64bda8_11
			}
		case 4:
			// zid 4 for "Imports"
			found14zgensym_a6e93beb7c64bda8_15[4] = true
			var zgensym_a6e93beb7c64bda8_20 uint32
			zgensym_a6e93beb7c64bda8_20, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Imports) >= int(zgensym_a6e93beb7c64bda8_20) {
				z.Imports = (z.Imports)[:zgensym_a6e93beb7c64bda8_20]
			} else {
				z.Imports = make([]string, zgensym_a6e93beb7c64bda8_20)
			}
			for zgensym_a6e93beb7c64bda8_13 := range z.Imports {
				z.Imports[zgensym_a6e93beb7c64bda8_13], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss14zgensym_a6e93beb7c64bda8_15 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Schema
var decodeMsgFieldOrder14zgensym_a6e93beb7c64bda8_15 = []string{"SourcePath", "SourcePackage", "ZebraSchemaId", "Structs", "Imports"}

var decodeMsgFieldSkip14zgensym_a6e93beb7c64bda8_15 = []bool{false, false, false, false, false}

// fields of Struct
var decodeMsgFieldOrder17zgensym_a6e93beb7c64bda8_18 = []string{"StructName", "Fields"}

var decodeMsgFieldSkip17zgensym_a6e93beb7c64bda8_18 = []bool{false, false}

// ZebrafieldsNotEmpty supports omitempty tags
func (z *Schema) ZebrafieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 5
	}
	var fieldsInUse uint32 = 5
	isempty[0] = (len(z.SourcePath) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.SourcePackage) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.ZebraSchemaId == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Structs) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.Imports) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}

	return fieldsInUse
}

// ZebraEncodeMsg implements msgp.Encodable
func (z *Schema) ZebraEncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_a6e93beb7c64bda8_21 [5]bool
	fieldsInUse_zgensym_a6e93beb7c64bda8_22 := z.fieldsNotEmpty(empty_zgensym_a6e93beb7c64bda8_21[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_a6e93beb7c64bda8_22 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Schema'
	err = en.Append(0xff)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x63, 0x68, 0x65, 0x6d, 0x61})
	if err != nil {
		return err
	}

	if !empty_zgensym_a6e93beb7c64bda8_21[0] {
		// zid 0 for "SourcePath"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SourcePath)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_21[1] {
		// zid 1 for "SourcePackage"
		err = en.Append(0x1)
		if err != nil {
			return err
		}
		err = en.WriteString(z.SourcePackage)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_21[2] {
		// zid 2 for "ZebraSchemaId"
		err = en.Append(0x2)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.ZebraSchemaId)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_21[3] {
		// zid 3 for "Structs"
		err = en.Append(0x3)
		if err != nil {
			return err
		}
		err = en.WriteMapHeader(uint32(len(z.Structs)))
		if err != nil {
			return
		}
		for zgensym_a6e93beb7c64bda8_10, zgensym_a6e93beb7c64bda8_11 := range z.Structs {
			err = en.WriteString(zgensym_a6e93beb7c64bda8_10)
			if err != nil {
				return
			}
			if zgensym_a6e93beb7c64bda8_11 == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {

				// honor the omitempty tags
				var empty_zgensym_a6e93beb7c64bda8_23 [2]bool
				fieldsInUse_zgensym_a6e93beb7c64bda8_24 := zgensym_a6e93beb7c64bda8_11.fieldsNotEmpty(empty_zgensym_a6e93beb7c64bda8_23[:])

				// map header
				err = en.WriteMapHeader(fieldsInUse_zgensym_a6e93beb7c64bda8_24 + 1)
				if err != nil {
					return err
				}

				// runtime struct type identification for 'Struct'
				err = en.Append(0xff)
				if err != nil {
					return err
				}
				err = en.WriteStringFromBytes([]byte{0x53, 0x74, 0x72, 0x75, 0x63, 0x74})
				if err != nil {
					return err
				}

				if !empty_zgensym_a6e93beb7c64bda8_23[0] {
					// zid 0 for "StructName"
					err = en.Append(0x0)
					if err != nil {
						return err
					}
					err = en.WriteString(zgensym_a6e93beb7c64bda8_11.StructName)
					if err != nil {
						return
					}
				}

				if !empty_zgensym_a6e93beb7c64bda8_23[1] {
					// zid 1 for "Fields"
					err = en.Append(0x1)
					if err != nil {
						return err
					}
					err = en.WriteArrayHeader(uint32(len(zgensym_a6e93beb7c64bda8_11.Fields)))
					if err != nil {
						return
					}
					for zgensym_a6e93beb7c64bda8_12 := range zgensym_a6e93beb7c64bda8_11.Fields {
						err = zgensym_a6e93beb7c64bda8_11.Fields[zgensym_a6e93beb7c64bda8_12].ZebraEncodeMsg(en)
						if err != nil {
							return
						}
					}
				}

			}
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_21[4] {
		// zid 4 for "Imports"
		err = en.Append(0x4)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Imports)))
		if err != nil {
			return
		}
		for zgensym_a6e93beb7c64bda8_13 := range z.Imports {
			err = en.WriteString(z.Imports[zgensym_a6e93beb7c64bda8_13])
			if err != nil {
				return
			}
		}
	}

	return
}

// ZebraMarshalMsg implements msgp.Marshaler
func (z *Schema) ZebraMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.ZebraMsgsize())

	// honor the omitempty tags
	var empty [5]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse+1)

	// runtime struct type identification for 'Schema'
	o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x53, 0x63, 0x68, 0x65, 0x6d, 0x61})

	if !empty[0] {
		// zid 0 for "SourcePath"
		o = append(o, 0x0)
		o = msgp.AppendString(o, z.SourcePath)
	}

	if !empty[1] {
		// zid 1 for "SourcePackage"
		o = append(o, 0x1)
		o = msgp.AppendString(o, z.SourcePackage)
	}

	if !empty[2] {
		// zid 2 for "ZebraSchemaId"
		o = append(o, 0x2)
		o = msgp.AppendInt64(o, z.ZebraSchemaId)
	}

	if !empty[3] {
		// zid 3 for "Structs"
		o = append(o, 0x3)
		o = msgp.AppendMapHeader(o, uint32(len(z.Structs)))
		for zgensym_a6e93beb7c64bda8_10, zgensym_a6e93beb7c64bda8_11 := range z.Structs {
			o = msgp.AppendString(o, zgensym_a6e93beb7c64bda8_10)
			if zgensym_a6e93beb7c64bda8_11 == nil {
				o = msgp.AppendNil(o)
			} else {

				// honor the omitempty tags
				var empty [2]bool
				fieldsInUse := zgensym_a6e93beb7c64bda8_11.fieldsNotEmpty(empty[:])
				o = msgp.AppendMapHeader(o, fieldsInUse+1)

				// runtime struct type identification for 'Struct'
				o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x53, 0x74, 0x72, 0x75, 0x63, 0x74})

				if !empty[0] {
					// zid 0 for "StructName"
					o = append(o, 0x0)
					o = msgp.AppendString(o, zgensym_a6e93beb7c64bda8_11.StructName)
				}

				if !empty[1] {
					// zid 1 for "Fields"
					o = append(o, 0x1)
					o = msgp.AppendArrayHeader(o, uint32(len(zgensym_a6e93beb7c64bda8_11.Fields)))
					for zgensym_a6e93beb7c64bda8_12 := range zgensym_a6e93beb7c64bda8_11.Fields {
						o, err = zgensym_a6e93beb7c64bda8_11.Fields[zgensym_a6e93beb7c64bda8_12].ZebraMarshalMsg(o)
						if err != nil {
							return
						}
					}
				}

			}
		}
	}

	if !empty[4] {
		// zid 4 for "Imports"
		o = append(o, 0x4)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Imports)))
		for zgensym_a6e93beb7c64bda8_13 := range z.Imports {
			o = msgp.AppendString(o, z.Imports[zgensym_a6e93beb7c64bda8_13])
		}
	}

	return
}

// ZebraUnmarshalMsg implements msgp.Unmarshaler
func (z *Schema) ZebraUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.ZebraUnmarshalMsgWithCfg(bts, nil)
}
func (z *Schema) ZebraUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields25zgensym_a6e93beb7c64bda8_26 = 5

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields25zgensym_a6e93beb7c64bda8_26 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields25zgensym_a6e93beb7c64bda8_26, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft25zgensym_a6e93beb7c64bda8_26 := totalEncodedFields25zgensym_a6e93beb7c64bda8_26
	missingFieldsLeft25zgensym_a6e93beb7c64bda8_26 := maxFields25zgensym_a6e93beb7c64bda8_26 - totalEncodedFields25zgensym_a6e93beb7c64bda8_26

	var nextMiss25zgensym_a6e93beb7c64bda8_26 int = -1
	var found25zgensym_a6e93beb7c64bda8_26 [maxFields25zgensym_a6e93beb7c64bda8_26]bool
	var curField25zgensym_a6e93beb7c64bda8_26 int

doneWithStruct25zgensym_a6e93beb7c64bda8_26:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft25zgensym_a6e93beb7c64bda8_26 > 0 || missingFieldsLeft25zgensym_a6e93beb7c64bda8_26 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft25zgensym_a6e93beb7c64bda8_26, missingFieldsLeft25zgensym_a6e93beb7c64bda8_26, msgp.ShowFound(found25zgensym_a6e93beb7c64bda8_26[:]), unmarshalMsgFieldOrder25zgensym_a6e93beb7c64bda8_26)
		if encodedFieldsLeft25zgensym_a6e93beb7c64bda8_26 > 0 {
			encodedFieldsLeft25zgensym_a6e93beb7c64bda8_26--
			curField25zgensym_a6e93beb7c64bda8_26, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss25zgensym_a6e93beb7c64bda8_26 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss25zgensym_a6e93beb7c64bda8_26 = 0
			}
			for nextMiss25zgensym_a6e93beb7c64bda8_26 < maxFields25zgensym_a6e93beb7c64bda8_26 && (found25zgensym_a6e93beb7c64bda8_26[nextMiss25zgensym_a6e93beb7c64bda8_26] || unmarshalMsgFieldSkip25zgensym_a6e93beb7c64bda8_26[nextMiss25zgensym_a6e93beb7c64bda8_26]) {
				nextMiss25zgensym_a6e93beb7c64bda8_26++
			}
			if nextMiss25zgensym_a6e93beb7c64bda8_26 == maxFields25zgensym_a6e93beb7c64bda8_26 {
				// filled all the empty fields!
				break doneWithStruct25zgensym_a6e93beb7c64bda8_26
			}
			missingFieldsLeft25zgensym_a6e93beb7c64bda8_26--
			curField25zgensym_a6e93beb7c64bda8_26 = nextMiss25zgensym_a6e93beb7c64bda8_26
		}
		//fmt.Printf("switching on curField: '%v'\n", curField25zgensym_a6e93beb7c64bda8_26)
		switch curField25zgensym_a6e93beb7c64bda8_26 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "SourcePath"
			found25zgensym_a6e93beb7c64bda8_26[0] = true
			z.SourcePath, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 1:
			// zid 1 for "SourcePackage"
			found25zgensym_a6e93beb7c64bda8_26[1] = true
			z.SourcePackage, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 2:
			// zid 2 for "ZebraSchemaId"
			found25zgensym_a6e93beb7c64bda8_26[2] = true
			z.ZebraSchemaId, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case 3:
			// zid 3 for "Structs"
			found25zgensym_a6e93beb7c64bda8_26[3] = true
			if nbs.AlwaysNil {
				if len(z.Structs) > 0 {
					for key, _ := range z.Structs {
						delete(z.Structs, key)
					}
				}

			} else {

				var zgensym_a6e93beb7c64bda8_27 uint32
				zgensym_a6e93beb7c64bda8_27, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Structs == nil && zgensym_a6e93beb7c64bda8_27 > 0 {
					z.Structs = make(map[string]*Struct, zgensym_a6e93beb7c64bda8_27)
				} else if len(z.Structs) > 0 {
					for key, _ := range z.Structs {
						delete(z.Structs, key)
					}
				}
				for zgensym_a6e93beb7c64bda8_27 > 0 {
					var zgensym_a6e93beb7c64bda8_10 string
					var zgensym_a6e93beb7c64bda8_11 *Struct
					zgensym_a6e93beb7c64bda8_27--
					zgensym_a6e93beb7c64bda8_10, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					// default gPtr logic.
					if nbs.PeekNil(bts) && zgensym_a6e93beb7c64bda8_11 == nil {
						// consume the nil
						bts, err = nbs.ReadNilBytes(bts)
						if err != nil {
							return
						}
					} else {
						// read as-if the wire has bytes, letting nbs take care of nils.

						if zgensym_a6e93beb7c64bda8_11 == nil {
							zgensym_a6e93beb7c64bda8_11 = new(Struct)
						}
						const maxFields28zgensym_a6e93beb7c64bda8_29 = 2

						// -- templateUnmarshalMsgZid starts here--
						var totalEncodedFields28zgensym_a6e93beb7c64bda8_29 uint32
						if !nbs.AlwaysNil {
							totalEncodedFields28zgensym_a6e93beb7c64bda8_29, bts, err = nbs.ReadMapHeaderBytes(bts)
							if err != nil {
								return
							}
						}
						encodedFieldsLeft28zgensym_a6e93beb7c64bda8_29 := totalEncodedFields28zgensym_a6e93beb7c64bda8_29
						missingFieldsLeft28zgensym_a6e93beb7c64bda8_29 := maxFields28zgensym_a6e93beb7c64bda8_29 - totalEncodedFields28zgensym_a6e93beb7c64bda8_29

						var nextMiss28zgensym_a6e93beb7c64bda8_29 int = -1
						var found28zgensym_a6e93beb7c64bda8_29 [maxFields28zgensym_a6e93beb7c64bda8_29]bool
						var curField28zgensym_a6e93beb7c64bda8_29 int

					doneWithStruct28zgensym_a6e93beb7c64bda8_29:
						// First fill all the encoded fields, then
						// treat the remaining, missing fields, as Nil.
						for encodedFieldsLeft28zgensym_a6e93beb7c64bda8_29 > 0 || missingFieldsLeft28zgensym_a6e93beb7c64bda8_29 > 0 {
							//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft28zgensym_a6e93beb7c64bda8_29, missingFieldsLeft28zgensym_a6e93beb7c64bda8_29, msgp.ShowFound(found28zgensym_a6e93beb7c64bda8_29[:]), unmarshalMsgFieldOrder28zgensym_a6e93beb7c64bda8_29)
							if encodedFieldsLeft28zgensym_a6e93beb7c64bda8_29 > 0 {
								encodedFieldsLeft28zgensym_a6e93beb7c64bda8_29--
								curField28zgensym_a6e93beb7c64bda8_29, bts, err = nbs.ReadIntBytes(bts)
								if err != nil {
									return
								}
							} else {
								//missing fields need handling
								if nextMiss28zgensym_a6e93beb7c64bda8_29 < 0 {
									// set bts to contain just mnil (0xc0)
									bts = nbs.PushAlwaysNil(bts)
									nextMiss28zgensym_a6e93beb7c64bda8_29 = 0
								}
								for nextMiss28zgensym_a6e93beb7c64bda8_29 < maxFields28zgensym_a6e93beb7c64bda8_29 && (found28zgensym_a6e93beb7c64bda8_29[nextMiss28zgensym_a6e93beb7c64bda8_29] || unmarshalMsgFieldSkip28zgensym_a6e93beb7c64bda8_29[nextMiss28zgensym_a6e93beb7c64bda8_29]) {
									nextMiss28zgensym_a6e93beb7c64bda8_29++
								}
								if nextMiss28zgensym_a6e93beb7c64bda8_29 == maxFields28zgensym_a6e93beb7c64bda8_29 {
									// filled all the empty fields!
									break doneWithStruct28zgensym_a6e93beb7c64bda8_29
								}
								missingFieldsLeft28zgensym_a6e93beb7c64bda8_29--
								curField28zgensym_a6e93beb7c64bda8_29 = nextMiss28zgensym_a6e93beb7c64bda8_29
							}
							//fmt.Printf("switching on curField: '%v'\n", curField28zgensym_a6e93beb7c64bda8_29)
							switch curField28zgensym_a6e93beb7c64bda8_29 {
							// -- templateUnmarshalMsgZid ends here --

							case 0:
								// zid 0 for "StructName"
								found28zgensym_a6e93beb7c64bda8_29[0] = true
								zgensym_a6e93beb7c64bda8_11.StructName, bts, err = nbs.ReadStringBytes(bts)

								if err != nil {
									return
								}
							case 1:
								// zid 1 for "Fields"
								found28zgensym_a6e93beb7c64bda8_29[1] = true
								if nbs.AlwaysNil {
									(zgensym_a6e93beb7c64bda8_11.Fields) = (zgensym_a6e93beb7c64bda8_11.Fields)[:0]
								} else {

									var zgensym_a6e93beb7c64bda8_30 uint32
									zgensym_a6e93beb7c64bda8_30, bts, err = nbs.ReadArrayHeaderBytes(bts)
									if err != nil {
										return
									}
									if cap(zgensym_a6e93beb7c64bda8_11.Fields) >= int(zgensym_a6e93beb7c64bda8_30) {
										zgensym_a6e93beb7c64bda8_11.Fields = (zgensym_a6e93beb7c64bda8_11.Fields)[:zgensym_a6e93beb7c64bda8_30]
									} else {
										zgensym_a6e93beb7c64bda8_11.Fields = make([]Field, zgensym_a6e93beb7c64bda8_30)
									}
									for zgensym_a6e93beb7c64bda8_12 := range zgensym_a6e93beb7c64bda8_11.Fields {
										bts, err = zgensym_a6e93beb7c64bda8_11.Fields[zgensym_a6e93beb7c64bda8_12].ZebraUnmarshalMsg(bts)
										if err != nil {
											return
										}
										if err != nil {
											return
										}
									}
								}
							default:
								bts, err = msgp.Skip(bts)
								if err != nil {
									return
								}
							}
						}
						if nextMiss28zgensym_a6e93beb7c64bda8_29 != -1 {
							bts = nbs.PopAlwaysNil()
						}

					}
					z.Structs[zgensym_a6e93beb7c64bda8_10] = zgensym_a6e93beb7c64bda8_11
				}
			}
		case 4:
			// zid 4 for "Imports"
			found25zgensym_a6e93beb7c64bda8_26[4] = true
			if nbs.AlwaysNil {
				(z.Imports) = (z.Imports)[:0]
			} else {

				var zgensym_a6e93beb7c64bda8_31 uint32
				zgensym_a6e93beb7c64bda8_31, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Imports) >= int(zgensym_a6e93beb7c64bda8_31) {
					z.Imports = (z.Imports)[:zgensym_a6e93beb7c64bda8_31]
				} else {
					z.Imports = make([]string, zgensym_a6e93beb7c64bda8_31)
				}
				for zgensym_a6e93beb7c64bda8_13 := range z.Imports {
					z.Imports[zgensym_a6e93beb7c64bda8_13], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss25zgensym_a6e93beb7c64bda8_26 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Schema
var unmarshalMsgFieldOrder25zgensym_a6e93beb7c64bda8_26 = []string{"SourcePath", "SourcePackage", "ZebraSchemaId", "Structs", "Imports"}

var unmarshalMsgFieldSkip25zgensym_a6e93beb7c64bda8_26 = []bool{false, false, false, false, false}

// fields of Struct
var unmarshalMsgFieldOrder28zgensym_a6e93beb7c64bda8_29 = []string{"StructName", "Fields"}

var unmarshalMsgFieldSkip28zgensym_a6e93beb7c64bda8_29 = []bool{false, false}

// ZebraMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Schema) ZebraMsgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.SourcePath) + 10 + msgp.StringPrefixSize + len(z.SourcePackage) + 10 + msgp.Int64Size + 10 + msgp.MapHeaderSize
	if z.Structs != nil {
		for zgensym_a6e93beb7c64bda8_10, zgensym_a6e93beb7c64bda8_11 := range z.Structs {
			_ = zgensym_a6e93beb7c64bda8_11
			_ = zgensym_a6e93beb7c64bda8_10
			s += msgp.StringPrefixSize + len(zgensym_a6e93beb7c64bda8_10)
			if zgensym_a6e93beb7c64bda8_11 == nil {
				s += msgp.NilSize
			} else {
				s += 1 + 10 + msgp.StringPrefixSize + len(zgensym_a6e93beb7c64bda8_11.StructName) + 10 + msgp.ArrayHeaderSize
				for zgensym_a6e93beb7c64bda8_12 := range zgensym_a6e93beb7c64bda8_11.Fields {
					s += zgensym_a6e93beb7c64bda8_11.Fields[zgensym_a6e93beb7c64bda8_12].ZebraMsgsize()
				}
			}
		}
	}
	s += 10 + msgp.ArrayHeaderSize
	for zgensym_a6e93beb7c64bda8_13 := range z.Imports {
		s += msgp.StringPrefixSize + len(z.Imports[zgensym_a6e93beb7c64bda8_13])
	}
	return
}

// ZebraDecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Struct) ZebraDecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields33zgensym_a6e93beb7c64bda8_34 = 2

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields33zgensym_a6e93beb7c64bda8_34 uint32
	totalEncodedFields33zgensym_a6e93beb7c64bda8_34, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft33zgensym_a6e93beb7c64bda8_34 := totalEncodedFields33zgensym_a6e93beb7c64bda8_34
	missingFieldsLeft33zgensym_a6e93beb7c64bda8_34 := maxFields33zgensym_a6e93beb7c64bda8_34 - totalEncodedFields33zgensym_a6e93beb7c64bda8_34

	var nextMiss33zgensym_a6e93beb7c64bda8_34 int = -1
	var found33zgensym_a6e93beb7c64bda8_34 [maxFields33zgensym_a6e93beb7c64bda8_34]bool
	var curField33zgensym_a6e93beb7c64bda8_34 int

doneWithStruct33zgensym_a6e93beb7c64bda8_34:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft33zgensym_a6e93beb7c64bda8_34 > 0 || missingFieldsLeft33zgensym_a6e93beb7c64bda8_34 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft33zgensym_a6e93beb7c64bda8_34, missingFieldsLeft33zgensym_a6e93beb7c64bda8_34, msgp.ShowFound(found33zgensym_a6e93beb7c64bda8_34[:]), decodeMsgFieldOrder33zgensym_a6e93beb7c64bda8_34)
		if encodedFieldsLeft33zgensym_a6e93beb7c64bda8_34 > 0 {
			encodedFieldsLeft33zgensym_a6e93beb7c64bda8_34--
			curField33zgensym_a6e93beb7c64bda8_34, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss33zgensym_a6e93beb7c64bda8_34 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss33zgensym_a6e93beb7c64bda8_34 = 0
			}
			for nextMiss33zgensym_a6e93beb7c64bda8_34 < maxFields33zgensym_a6e93beb7c64bda8_34 && (found33zgensym_a6e93beb7c64bda8_34[nextMiss33zgensym_a6e93beb7c64bda8_34] || decodeMsgFieldSkip33zgensym_a6e93beb7c64bda8_34[nextMiss33zgensym_a6e93beb7c64bda8_34]) {
				nextMiss33zgensym_a6e93beb7c64bda8_34++
			}
			if nextMiss33zgensym_a6e93beb7c64bda8_34 == maxFields33zgensym_a6e93beb7c64bda8_34 {
				// filled all the empty fields!
				break doneWithStruct33zgensym_a6e93beb7c64bda8_34
			}
			missingFieldsLeft33zgensym_a6e93beb7c64bda8_34--
			curField33zgensym_a6e93beb7c64bda8_34 = nextMiss33zgensym_a6e93beb7c64bda8_34
		}
		//fmt.Printf("switching on curField: '%v'\n", curField33zgensym_a6e93beb7c64bda8_34)
		switch curField33zgensym_a6e93beb7c64bda8_34 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "StructName"
			found33zgensym_a6e93beb7c64bda8_34[0] = true
			z.StructName, err = dc.ReadString()
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "Fields"
			found33zgensym_a6e93beb7c64bda8_34[1] = true
			var zgensym_a6e93beb7c64bda8_35 uint32
			zgensym_a6e93beb7c64bda8_35, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Fields) >= int(zgensym_a6e93beb7c64bda8_35) {
				z.Fields = (z.Fields)[:zgensym_a6e93beb7c64bda8_35]
			} else {
				z.Fields = make([]Field, zgensym_a6e93beb7c64bda8_35)
			}
			for zgensym_a6e93beb7c64bda8_32 := range z.Fields {
				err = z.Fields[zgensym_a6e93beb7c64bda8_32].ZebraDecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss33zgensym_a6e93beb7c64bda8_34 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Struct
var decodeMsgFieldOrder33zgensym_a6e93beb7c64bda8_34 = []string{"StructName", "Fields"}

var decodeMsgFieldSkip33zgensym_a6e93beb7c64bda8_34 = []bool{false, false}

// ZebrafieldsNotEmpty supports omitempty tags
func (z *Struct) ZebrafieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.StructName) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Fields) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// ZebraEncodeMsg implements msgp.Encodable
func (z *Struct) ZebraEncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_a6e93beb7c64bda8_36 [2]bool
	fieldsInUse_zgensym_a6e93beb7c64bda8_37 := z.fieldsNotEmpty(empty_zgensym_a6e93beb7c64bda8_36[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_a6e93beb7c64bda8_37 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Struct'
	err = en.Append(0xff)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x74, 0x72, 0x75, 0x63, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_a6e93beb7c64bda8_36[0] {
		// zid 0 for "StructName"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteString(z.StructName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_36[1] {
		// zid 1 for "Fields"
		err = en.Append(0x1)
		if err != nil {
			return err
		}
		err = en.WriteArrayHeader(uint32(len(z.Fields)))
		if err != nil {
			return
		}
		for zgensym_a6e93beb7c64bda8_32 := range z.Fields {
			err = z.Fields[zgensym_a6e93beb7c64bda8_32].ZebraEncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// ZebraMarshalMsg implements msgp.Marshaler
func (z *Struct) ZebraMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.ZebraMsgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse+1)

	// runtime struct type identification for 'Struct'
	o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x53, 0x74, 0x72, 0x75, 0x63, 0x74})

	if !empty[0] {
		// zid 0 for "StructName"
		o = append(o, 0x0)
		o = msgp.AppendString(o, z.StructName)
	}

	if !empty[1] {
		// zid 1 for "Fields"
		o = append(o, 0x1)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Fields)))
		for zgensym_a6e93beb7c64bda8_32 := range z.Fields {
			o, err = z.Fields[zgensym_a6e93beb7c64bda8_32].ZebraMarshalMsg(o)
			if err != nil {
				return
			}
		}
	}

	return
}

// ZebraUnmarshalMsg implements msgp.Unmarshaler
func (z *Struct) ZebraUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.ZebraUnmarshalMsgWithCfg(bts, nil)
}
func (z *Struct) ZebraUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields38zgensym_a6e93beb7c64bda8_39 = 2

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields38zgensym_a6e93beb7c64bda8_39 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields38zgensym_a6e93beb7c64bda8_39, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft38zgensym_a6e93beb7c64bda8_39 := totalEncodedFields38zgensym_a6e93beb7c64bda8_39
	missingFieldsLeft38zgensym_a6e93beb7c64bda8_39 := maxFields38zgensym_a6e93beb7c64bda8_39 - totalEncodedFields38zgensym_a6e93beb7c64bda8_39

	var nextMiss38zgensym_a6e93beb7c64bda8_39 int = -1
	var found38zgensym_a6e93beb7c64bda8_39 [maxFields38zgensym_a6e93beb7c64bda8_39]bool
	var curField38zgensym_a6e93beb7c64bda8_39 int

doneWithStruct38zgensym_a6e93beb7c64bda8_39:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft38zgensym_a6e93beb7c64bda8_39 > 0 || missingFieldsLeft38zgensym_a6e93beb7c64bda8_39 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft38zgensym_a6e93beb7c64bda8_39, missingFieldsLeft38zgensym_a6e93beb7c64bda8_39, msgp.ShowFound(found38zgensym_a6e93beb7c64bda8_39[:]), unmarshalMsgFieldOrder38zgensym_a6e93beb7c64bda8_39)
		if encodedFieldsLeft38zgensym_a6e93beb7c64bda8_39 > 0 {
			encodedFieldsLeft38zgensym_a6e93beb7c64bda8_39--
			curField38zgensym_a6e93beb7c64bda8_39, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss38zgensym_a6e93beb7c64bda8_39 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss38zgensym_a6e93beb7c64bda8_39 = 0
			}
			for nextMiss38zgensym_a6e93beb7c64bda8_39 < maxFields38zgensym_a6e93beb7c64bda8_39 && (found38zgensym_a6e93beb7c64bda8_39[nextMiss38zgensym_a6e93beb7c64bda8_39] || unmarshalMsgFieldSkip38zgensym_a6e93beb7c64bda8_39[nextMiss38zgensym_a6e93beb7c64bda8_39]) {
				nextMiss38zgensym_a6e93beb7c64bda8_39++
			}
			if nextMiss38zgensym_a6e93beb7c64bda8_39 == maxFields38zgensym_a6e93beb7c64bda8_39 {
				// filled all the empty fields!
				break doneWithStruct38zgensym_a6e93beb7c64bda8_39
			}
			missingFieldsLeft38zgensym_a6e93beb7c64bda8_39--
			curField38zgensym_a6e93beb7c64bda8_39 = nextMiss38zgensym_a6e93beb7c64bda8_39
		}
		//fmt.Printf("switching on curField: '%v'\n", curField38zgensym_a6e93beb7c64bda8_39)
		switch curField38zgensym_a6e93beb7c64bda8_39 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "StructName"
			found38zgensym_a6e93beb7c64bda8_39[0] = true
			z.StructName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 1:
			// zid 1 for "Fields"
			found38zgensym_a6e93beb7c64bda8_39[1] = true
			if nbs.AlwaysNil {
				(z.Fields) = (z.Fields)[:0]
			} else {

				var zgensym_a6e93beb7c64bda8_40 uint32
				zgensym_a6e93beb7c64bda8_40, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Fields) >= int(zgensym_a6e93beb7c64bda8_40) {
					z.Fields = (z.Fields)[:zgensym_a6e93beb7c64bda8_40]
				} else {
					z.Fields = make([]Field, zgensym_a6e93beb7c64bda8_40)
				}
				for zgensym_a6e93beb7c64bda8_32 := range z.Fields {
					bts, err = z.Fields[zgensym_a6e93beb7c64bda8_32].ZebraUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss38zgensym_a6e93beb7c64bda8_39 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Struct
var unmarshalMsgFieldOrder38zgensym_a6e93beb7c64bda8_39 = []string{"StructName", "Fields"}

var unmarshalMsgFieldSkip38zgensym_a6e93beb7c64bda8_39 = []bool{false, false}

// ZebraMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Struct) ZebraMsgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.StructName) + 10 + msgp.ArrayHeaderSize
	for zgensym_a6e93beb7c64bda8_32 := range z.Fields {
		s += z.Fields[zgensym_a6e93beb7c64bda8_32].ZebraMsgsize()
	}
	return
}

// ZebraDecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Zkind) ZebraDecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_a6e93beb7c64bda8_41 uint64
		zgensym_a6e93beb7c64bda8_41, err = dc.ReadUint64()
		(*z) = Zkind(zgensym_a6e93beb7c64bda8_41)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// ZebraEncodeMsg implements msgp.Encodable
func (z Zkind) ZebraEncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteUint64(uint64(z))
	if err != nil {
		return
	}
	return
}

// ZebraMarshalMsg implements msgp.Marshaler
func (z Zkind) ZebraMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.ZebraMsgsize())
	o = msgp.AppendUint64(o, uint64(z))
	return
}

// ZebraUnmarshalMsg implements msgp.Unmarshaler
func (z *Zkind) ZebraUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.ZebraUnmarshalMsgWithCfg(bts, nil)
}
func (z *Zkind) ZebraUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_a6e93beb7c64bda8_42 uint64
		zgensym_a6e93beb7c64bda8_42, bts, err = nbs.ReadUint64Bytes(bts)

		if err != nil {
			return
		}
		(*z) = Zkind(zgensym_a6e93beb7c64bda8_42)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// ZebraMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Zkind) ZebraMsgsize() (s int) {
	s = msgp.Uint64Size
	return
}

// ZebraDecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Ztype) ZebraDecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields43zgensym_a6e93beb7c64bda8_44 = 4

	// -- templateDecodeMsgZid starts here--
	var totalEncodedFields43zgensym_a6e93beb7c64bda8_44 uint32
	totalEncodedFields43zgensym_a6e93beb7c64bda8_44, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft43zgensym_a6e93beb7c64bda8_44 := totalEncodedFields43zgensym_a6e93beb7c64bda8_44
	missingFieldsLeft43zgensym_a6e93beb7c64bda8_44 := maxFields43zgensym_a6e93beb7c64bda8_44 - totalEncodedFields43zgensym_a6e93beb7c64bda8_44

	var nextMiss43zgensym_a6e93beb7c64bda8_44 int = -1
	var found43zgensym_a6e93beb7c64bda8_44 [maxFields43zgensym_a6e93beb7c64bda8_44]bool
	var curField43zgensym_a6e93beb7c64bda8_44 int

doneWithStruct43zgensym_a6e93beb7c64bda8_44:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft43zgensym_a6e93beb7c64bda8_44 > 0 || missingFieldsLeft43zgensym_a6e93beb7c64bda8_44 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft43zgensym_a6e93beb7c64bda8_44, missingFieldsLeft43zgensym_a6e93beb7c64bda8_44, msgp.ShowFound(found43zgensym_a6e93beb7c64bda8_44[:]), decodeMsgFieldOrder43zgensym_a6e93beb7c64bda8_44)
		if encodedFieldsLeft43zgensym_a6e93beb7c64bda8_44 > 0 {
			encodedFieldsLeft43zgensym_a6e93beb7c64bda8_44--
			curField43zgensym_a6e93beb7c64bda8_44, err = dc.ReadInt()
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss43zgensym_a6e93beb7c64bda8_44 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss43zgensym_a6e93beb7c64bda8_44 = 0
			}
			for nextMiss43zgensym_a6e93beb7c64bda8_44 < maxFields43zgensym_a6e93beb7c64bda8_44 && (found43zgensym_a6e93beb7c64bda8_44[nextMiss43zgensym_a6e93beb7c64bda8_44] || decodeMsgFieldSkip43zgensym_a6e93beb7c64bda8_44[nextMiss43zgensym_a6e93beb7c64bda8_44]) {
				nextMiss43zgensym_a6e93beb7c64bda8_44++
			}
			if nextMiss43zgensym_a6e93beb7c64bda8_44 == maxFields43zgensym_a6e93beb7c64bda8_44 {
				// filled all the empty fields!
				break doneWithStruct43zgensym_a6e93beb7c64bda8_44
			}
			missingFieldsLeft43zgensym_a6e93beb7c64bda8_44--
			curField43zgensym_a6e93beb7c64bda8_44 = nextMiss43zgensym_a6e93beb7c64bda8_44
		}
		//fmt.Printf("switching on curField: '%v'\n", curField43zgensym_a6e93beb7c64bda8_44)
		switch curField43zgensym_a6e93beb7c64bda8_44 {
		// -- templateDecodeMsgZid ends here --

		case 0:
			// zid 0 for "Kind"
			found43zgensym_a6e93beb7c64bda8_44[0] = true
			{
				var zgensym_a6e93beb7c64bda8_45 uint64
				zgensym_a6e93beb7c64bda8_45, err = dc.ReadUint64()
				z.Kind = Zkind(zgensym_a6e93beb7c64bda8_45)
			}
			if err != nil {
				return
			}
		case 1:
			// zid 1 for "Str"
			found43zgensym_a6e93beb7c64bda8_44[1] = true
			z.Str, err = dc.ReadString()
			if err != nil {
				return
			}
		case 2:
			// zid 2 for "Domain"
			found43zgensym_a6e93beb7c64bda8_44[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Domain != nil {
					dc.PushAlwaysNil()
					err = z.Domain.ZebraDecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Domain == nil {
					z.Domain = new(Ztype)
				}
				err = z.Domain.ZebraDecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case 3:
			// zid 3 for "Range"
			found43zgensym_a6e93beb7c64bda8_44[3] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Range != nil {
					dc.PushAlwaysNil()
					err = z.Range.ZebraDecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Range == nil {
					z.Range = new(Ztype)
				}
				err = z.Range.ZebraDecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss43zgensym_a6e93beb7c64bda8_44 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Ztype
var decodeMsgFieldOrder43zgensym_a6e93beb7c64bda8_44 = []string{"Kind", "Str", "Domain", "Range"}

var decodeMsgFieldSkip43zgensym_a6e93beb7c64bda8_44 = []bool{false, false, false, false}

// ZebrafieldsNotEmpty supports omitempty tags
func (z *Ztype) ZebrafieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (z.Kind == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Str) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Domain == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Range == nil) // pointer, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// ZebraEncodeMsg implements msgp.Encodable
func (z *Ztype) ZebraEncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_a6e93beb7c64bda8_46 [4]bool
	fieldsInUse_zgensym_a6e93beb7c64bda8_47 := z.fieldsNotEmpty(empty_zgensym_a6e93beb7c64bda8_46[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_a6e93beb7c64bda8_47 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Ztype'
	err = en.Append(0xff)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x5a, 0x74, 0x79, 0x70, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_a6e93beb7c64bda8_46[0] {
		// zid 0 for "Kind"
		err = en.Append(0x0)
		if err != nil {
			return err
		}
		err = en.WriteUint64(uint64(z.Kind))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_46[1] {
		// zid 1 for "Str"
		err = en.Append(0x1)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Str)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_46[2] {
		// zid 2 for "Domain"
		err = en.Append(0x2)
		if err != nil {
			return err
		}
		if z.Domain == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Domain.ZebraEncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	if !empty_zgensym_a6e93beb7c64bda8_46[3] {
		// zid 3 for "Range"
		err = en.Append(0x3)
		if err != nil {
			return err
		}
		if z.Range == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Range.ZebraEncodeMsg(en)
			if err != nil {
				return
			}
		}
	}

	return
}

// ZebraMarshalMsg implements msgp.Marshaler
func (z *Ztype) ZebraMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.ZebraMsgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse+1)

	// runtime struct type identification for 'Ztype'
	o = msgp.AppendNegativeOneAndStringAsBytes(o, []byte{0x5a, 0x74, 0x79, 0x70, 0x65})

	if !empty[0] {
		// zid 0 for "Kind"
		o = append(o, 0x0)
		o = msgp.AppendUint64(o, uint64(z.Kind))
	}

	if !empty[1] {
		// zid 1 for "Str"
		o = append(o, 0x1)
		o = msgp.AppendString(o, z.Str)
	}

	if !empty[2] {
		// zid 2 for "Domain"
		o = append(o, 0x2)
		if z.Domain == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Domain.ZebraMarshalMsg(o)
			if err != nil {
				return
			}
		}
	}

	if !empty[3] {
		// zid 3 for "Range"
		o = append(o, 0x3)
		if z.Range == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Range.ZebraMarshalMsg(o)
			if err != nil {
				return
			}
		}
	}

	return
}

// ZebraUnmarshalMsg implements msgp.Unmarshaler
func (z *Ztype) ZebraUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.ZebraUnmarshalMsgWithCfg(bts, nil)
}
func (z *Ztype) ZebraUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields48zgensym_a6e93beb7c64bda8_49 = 4

	// -- templateUnmarshalMsgZid starts here--
	var totalEncodedFields48zgensym_a6e93beb7c64bda8_49 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields48zgensym_a6e93beb7c64bda8_49, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft48zgensym_a6e93beb7c64bda8_49 := totalEncodedFields48zgensym_a6e93beb7c64bda8_49
	missingFieldsLeft48zgensym_a6e93beb7c64bda8_49 := maxFields48zgensym_a6e93beb7c64bda8_49 - totalEncodedFields48zgensym_a6e93beb7c64bda8_49

	var nextMiss48zgensym_a6e93beb7c64bda8_49 int = -1
	var found48zgensym_a6e93beb7c64bda8_49 [maxFields48zgensym_a6e93beb7c64bda8_49]bool
	var curField48zgensym_a6e93beb7c64bda8_49 int

doneWithStruct48zgensym_a6e93beb7c64bda8_49:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft48zgensym_a6e93beb7c64bda8_49 > 0 || missingFieldsLeft48zgensym_a6e93beb7c64bda8_49 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft48zgensym_a6e93beb7c64bda8_49, missingFieldsLeft48zgensym_a6e93beb7c64bda8_49, msgp.ShowFound(found48zgensym_a6e93beb7c64bda8_49[:]), unmarshalMsgFieldOrder48zgensym_a6e93beb7c64bda8_49)
		if encodedFieldsLeft48zgensym_a6e93beb7c64bda8_49 > 0 {
			encodedFieldsLeft48zgensym_a6e93beb7c64bda8_49--
			curField48zgensym_a6e93beb7c64bda8_49, bts, err = nbs.ReadIntBytes(bts)
			if err != nil {
				return
			}
		} else {
			//missing fields need handling
			if nextMiss48zgensym_a6e93beb7c64bda8_49 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss48zgensym_a6e93beb7c64bda8_49 = 0
			}
			for nextMiss48zgensym_a6e93beb7c64bda8_49 < maxFields48zgensym_a6e93beb7c64bda8_49 && (found48zgensym_a6e93beb7c64bda8_49[nextMiss48zgensym_a6e93beb7c64bda8_49] || unmarshalMsgFieldSkip48zgensym_a6e93beb7c64bda8_49[nextMiss48zgensym_a6e93beb7c64bda8_49]) {
				nextMiss48zgensym_a6e93beb7c64bda8_49++
			}
			if nextMiss48zgensym_a6e93beb7c64bda8_49 == maxFields48zgensym_a6e93beb7c64bda8_49 {
				// filled all the empty fields!
				break doneWithStruct48zgensym_a6e93beb7c64bda8_49
			}
			missingFieldsLeft48zgensym_a6e93beb7c64bda8_49--
			curField48zgensym_a6e93beb7c64bda8_49 = nextMiss48zgensym_a6e93beb7c64bda8_49
		}
		//fmt.Printf("switching on curField: '%v'\n", curField48zgensym_a6e93beb7c64bda8_49)
		switch curField48zgensym_a6e93beb7c64bda8_49 {
		// -- templateUnmarshalMsgZid ends here --

		case 0:
			// zid 0 for "Kind"
			found48zgensym_a6e93beb7c64bda8_49[0] = true
			{
				var zgensym_a6e93beb7c64bda8_50 uint64
				zgensym_a6e93beb7c64bda8_50, bts, err = nbs.ReadUint64Bytes(bts)

				if err != nil {
					return
				}
				z.Kind = Zkind(zgensym_a6e93beb7c64bda8_50)
			}
		case 1:
			// zid 1 for "Str"
			found48zgensym_a6e93beb7c64bda8_49[1] = true
			z.Str, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case 2:
			// zid 2 for "Domain"
			found48zgensym_a6e93beb7c64bda8_49[2] = true
			if nbs.AlwaysNil {
				if z.Domain != nil {
					z.Domain.ZebraUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Domain {
						z.Domain.ZebraUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Domain == nil {
						z.Domain = new(Ztype)
					}
					bts, err = z.Domain.ZebraUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		case 3:
			// zid 3 for "Range"
			found48zgensym_a6e93beb7c64bda8_49[3] = true
			if nbs.AlwaysNil {
				if z.Range != nil {
					z.Range.ZebraUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Range {
						z.Range.ZebraUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Range == nil {
						z.Range = new(Ztype)
					}
					bts, err = z.Range.ZebraUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss48zgensym_a6e93beb7c64bda8_49 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Ztype
var unmarshalMsgFieldOrder48zgensym_a6e93beb7c64bda8_49 = []string{"Kind", "Str", "Domain", "Range"}

var unmarshalMsgFieldSkip48zgensym_a6e93beb7c64bda8_49 = []bool{false, false, false, false}

// ZebraMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Ztype) ZebraMsgsize() (s int) {
	s = 1 + 9 + msgp.Uint64Size + 9 + msgp.StringPrefixSize + len(z.Str) + 9
	if z.Domain == nil {
		s += msgp.NilSize
	} else {
		s += z.Domain.ZebraMsgsize()
	}
	s += 9
	if z.Range == nil {
		s += msgp.NilSize
	} else {
		s += z.Range.ZebraMsgsize()
	}
	return
}

// FileZebra_zebra_go holds ZebraPack schema from file 'zebra/zebra.go'
type FileZebra_zebra_go struct{}

// ZebraZebraSchemaInMsgpack2Format provides the ZebraPack Schema in msgpack2 format, length 3448 bytes
func (FileZebra_zebra_go) ZebraZebraSchemaInMsgpack2Format() []byte {
	return []byte{
		0x84, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
		0x74, 0x68, 0xae, 0x7a, 0x65, 0x62, 0x72, 0x61, 0x2f, 0x7a,
		0x65, 0x62, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0xad, 0x53, 0x6f,
		0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
		0x65, 0xa5, 0x7a, 0x65, 0x62, 0x72, 0x61, 0xad, 0x5a, 0x65,
		0x62, 0x72, 0x61, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49,
		0x64, 0xd3, 0x00, 0x01, 0xa5, 0xa9, 0x4b, 0xd4, 0x96, 0x24,
		0xa7, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x84, 0xa5,
		0x5a, 0x74, 0x79, 0x70, 0x65, 0x82, 0xaa, 0x53, 0x74, 0x72,
		0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xa5, 0x5a, 0x74,
		0x79, 0x70, 0x65, 0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
		0x94, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x00, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa5, 0x5a, 0x6b, 0x69, 0x6e,
		0x64, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
		0x65, 0x0b, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x0b, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x75, 0x69,
		0x6e, 0x74, 0x36, 0x34, 0x88, 0xa3, 0x5a, 0x69, 0x64, 0x01,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa3, 0x53, 0x74, 0x72, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa3,
		0x53, 0x74, 0x72, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
		0x69, 0x76, 0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xa9, 0x4f, 0x6d, 0x69,
		0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0xc3, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x02, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa6, 0x44, 0x6f, 0x6d, 0x61,
		0x69, 0x6e, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa6, 0x44, 0x6f, 0x6d, 0x61,
		0x69, 0x6e, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x2a, 0x5a, 0x74, 0x79,
		0x70, 0x65, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1c, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1c, 0xa3, 0x53,
		0x74, 0x72, 0xa7, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
		0xa6, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x16, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x5a,
		0x74, 0x79, 0x70, 0x65, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45,
		0x6d, 0x70, 0x74, 0x79, 0xc3, 0x87, 0xa3, 0x5a, 0x69, 0x64,
		0x03, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xa5, 0x52, 0x61, 0x6e, 0x67, 0x65, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0xa5, 0x52, 0x61, 0x6e, 0x67, 0x65, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x2a, 0x5a, 0x74, 0x79, 0x70, 0x65, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x1c, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x83, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x1c, 0xa3, 0x53, 0x74, 0x72, 0xa7, 0x50,
		0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0xa6, 0x44, 0x6f, 0x6d,
		0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x16,
		0xa3, 0x53, 0x74, 0x72, 0xa5, 0x5a, 0x74, 0x79, 0x70, 0x65,
		0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79,
		0xc3, 0xa6, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x82, 0xaa,
		0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
		0xa6, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0xa6, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x73, 0x95, 0x88, 0xa3, 0x5a, 0x69, 0x64,
		0x00, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
		0x50, 0x61, 0x74, 0x68, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xaa, 0x53, 0x6f,
		0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x70, 0x74,
		0x79, 0xc3, 0x88, 0xa3, 0x5a, 0x69, 0x64, 0x01, 0xab, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
		0xad, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63,
		0x6b, 0x61, 0x67, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xad, 0x53, 0x6f,
		0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
		0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
		0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
		0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74,
		0x72, 0x69, 0x6e, 0x67, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45,
		0x6d, 0x70, 0x74, 0x79, 0xc3, 0x88, 0xa3, 0x5a, 0x69, 0x64,
		0x02, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xad, 0x5a, 0x65, 0x62, 0x72, 0x61, 0x53,
		0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xad, 0x5a, 0x65, 0x62, 0x72, 0x61, 0x53, 0x63, 0x68, 0x65,
		0x6d, 0x61, 0x49, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa5, 0x69, 0x6e,
		0x74, 0x36, 0x34, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
		0x69, 0x76, 0x65, 0x11, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x11, 0xa3, 0x53, 0x74, 0x72, 0xa5,
		0x69, 0x6e, 0x74, 0x36, 0x34, 0xa9, 0x4f, 0x6d, 0x69, 0x74,
		0x45, 0x6d, 0x70, 0x74, 0x79, 0xc3, 0x87, 0xa3, 0x5a, 0x69,
		0x64, 0x03, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0xa7, 0x53, 0x74, 0x72, 0x75, 0x63,
		0x74, 0x73, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa7, 0x53, 0x74, 0x72, 0x75,
		0x63, 0x74, 0x73, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xb2, 0x6d, 0x61, 0x70,
		0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5d, 0x2a, 0x53,
		0x74, 0x72, 0x75, 0x63, 0x74, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x84, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x18, 0xa3, 0x53, 0x74, 0x72, 0xa3, 0x4d, 0x61, 0x70, 0xa6,
		0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74,
		0x72, 0x69, 0x6e, 0x67, 0xa5, 0x52, 0x61, 0x6e, 0x67, 0x65,
		0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1c, 0xa3, 0x53, 0x74,
		0x72, 0xa7, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0xa6,
		0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x19, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x53, 0x74,
		0x72, 0x75, 0x63, 0x74, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45,
		0x6d, 0x70, 0x74, 0x79, 0xc3, 0x87, 0xa3, 0x5a, 0x69, 0x64,
		0x04, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xa7, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
		0x73, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xa7, 0x49, 0x6d, 0x70, 0x6f, 0x72,
		0x74, 0x73, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa8, 0x5b, 0x5d, 0x73, 0x74,
		0x72, 0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1a,
		0xa3, 0x53, 0x74, 0x72, 0xa5, 0x53, 0x6c, 0x69, 0x63, 0x65,
		0xa6, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73,
		0x74, 0x72, 0x69, 0x6e, 0x67, 0xa9, 0x4f, 0x6d, 0x69, 0x74,
		0x45, 0x6d, 0x70, 0x74, 0x79, 0xc3, 0xa6, 0x53, 0x74, 0x72,
		0x75, 0x63, 0x74, 0x82, 0xaa, 0x53, 0x74, 0x72, 0x75, 0x63,
		0x74, 0x4e, 0x61, 0x6d, 0x65, 0xa6, 0x53, 0x74, 0x72, 0x75,
		0x63, 0x74, 0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x92,
		0x88, 0xa3, 0x5a, 0x69, 0x64, 0x00, 0xab, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xaa, 0x53,
		0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0xaa, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e,
		0x61, 0x6d, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
		0x69, 0x76, 0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xa9, 0x4f, 0x6d, 0x69,
		0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0xc3, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x01, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa6, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x73, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa6, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x73, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa7, 0x5b, 0x5d, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0xa3,
		0x53, 0x74, 0x72, 0xa5, 0x53, 0x6c, 0x69, 0x63, 0x65, 0xa6,
		0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x16, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d,
		0x70, 0x74, 0x79, 0xc3, 0xa5, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x82, 0xaa, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61,
		0x6d, 0x65, 0xa5, 0x46, 0x69, 0x65, 0x6c, 0x64, 0xa6, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x73, 0x9b, 0x87, 0xa3, 0x5a, 0x69,
		0x64, 0x00, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0xa3, 0x5a, 0x69, 0x64, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d,
		0x65, 0xa3, 0x5a, 0x69, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa5, 0x69,
		0x6e, 0x74, 0x36, 0x34, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69,
		0x74, 0x69, 0x76, 0x65, 0x11, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82,
		0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x11, 0xa3, 0x53, 0x74, 0x72,
		0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x87, 0xa3, 0x5a, 0x69,
		0x64, 0x01, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xab,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
		0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
		0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74,
		0x72, 0x69, 0x6e, 0x67, 0x88, 0xa3, 0x5a, 0x69, 0x64, 0x02,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d,
		0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
		0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
		0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74,
		0x72, 0x69, 0x6e, 0x67, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45,
		0x6d, 0x70, 0x74, 0x79, 0xc3, 0x88, 0xa3, 0x5a, 0x69, 0x64,
		0x03, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
		0x74, 0x72, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69,
		0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73,
		0x74, 0x72, 0x69, 0x6e, 0x67, 0xa9, 0x4f, 0x6d, 0x69, 0x74,
		0x45, 0x6d, 0x70, 0x74, 0x79, 0xc3, 0x88, 0xa3, 0x5a, 0x69,
		0x64, 0x04, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d,
		0x65, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa5, 0x5a,
		0x6b, 0x69, 0x6e, 0x64, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69,
		0x74, 0x69, 0x76, 0x65, 0x0b, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82,
		0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x0b, 0xa3, 0x53, 0x74, 0x72,
		0xa6, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xa9, 0x4f, 0x6d,
		0x69, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0xc3, 0x88, 0xa3,
		0x5a, 0x69, 0x64, 0x05, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xae, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
		0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
		0x74, 0x72, 0xa5, 0x5a, 0x6b, 0x69, 0x6e, 0x64, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x0b, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x0b,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x75, 0x69, 0x6e, 0x74, 0x36,
		0x34, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x70, 0x74,
		0x79, 0xc3, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x06, 0xab, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
		0x65, 0x53, 0x74, 0x72, 0xa6, 0x2a, 0x5a, 0x74, 0x79, 0x70,
		0x65, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x1c, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
		0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1c, 0xa3, 0x53, 0x74,
		0x72, 0xa7, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0xa6,
		0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x16, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x5a, 0x74,
		0x79, 0x70, 0x65, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d,
		0x70, 0x74, 0x79, 0xc3, 0x88, 0xa3, 0x5a, 0x69, 0x64, 0x07,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x70,
		0x74, 0x79, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa9, 0x4f, 0x6d, 0x69, 0x74,
		0x45, 0x6d, 0x70, 0x74, 0x79, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa4, 0x62,
		0x6f, 0x6f, 0x6c, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
		0x69, 0x76, 0x65, 0x12, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x12, 0xa3, 0x53, 0x74, 0x72, 0xa4,
		0x62, 0x6f, 0x6f, 0x6c, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45,
		0x6d, 0x70, 0x74, 0x79, 0xc3, 0x88, 0xa3, 0x5a, 0x69, 0x64,
		0x08, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xa4, 0x53, 0x6b, 0x69, 0x70, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d,
		0x65, 0xa4, 0x53, 0x6b, 0x69, 0x70, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa4,
		0x62, 0x6f, 0x6f, 0x6c, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69,
		0x74, 0x69, 0x76, 0x65, 0x12, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82,
		0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0xa3, 0x53, 0x74, 0x72,
		0xa4, 0x62, 0x6f, 0x6f, 0x6c, 0xa9, 0x4f, 0x6d, 0x69, 0x74,
		0x45, 0x6d, 0x70, 0x74, 0x79, 0xc3, 0x88, 0xa3, 0x5a, 0x69,
		0x64, 0x09, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0xaa, 0x44, 0x65, 0x70, 0x72, 0x65,
		0x63, 0x61, 0x74, 0x65, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xaa, 0x44,
		0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
		0x74, 0x72, 0xa4, 0x62, 0x6f, 0x6f, 0x6c, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
		0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0xa3,
		0x53, 0x74, 0x72, 0xa4, 0x62, 0x6f, 0x6f, 0x6c, 0xa9, 0x4f,
		0x6d, 0x69, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0xc3, 0x88,
		0xa3, 0x5a, 0x69, 0x64, 0x0a, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa8, 0x53, 0x68,
		0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa8,
		0x53, 0x68, 0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa4, 0x62, 0x6f, 0x6f, 0x6c, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
		0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69,
		0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0xa3, 0x53,
		0x74, 0x72, 0xa4, 0x62, 0x6f, 0x6f, 0x6c, 0xa9, 0x4f, 0x6d,
		0x69, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0xc3,
	}
}

// ZebraZebraSchemaInJsonCompact provides the ZebraPack Schema in compact JSON format, length 4441 bytes
func (FileZebra_zebra_go) ZebraZebraSchemaInJsonCompact() []byte {
	return []byte(`{"SourcePath":"zebra/zebra.go","SourcePackage":"zebra","ZebraSchemaId":463621516989988,"Structs":{"Ztype":{"StructName":"Ztype","Fields":[{"Zid":0,"FieldGoName":"Kind","FieldTagName":"Kind","FieldTypeStr":"Zkind","FieldCategory":23,"FieldPrimitive":11,"FieldFullType":{"Kind":11,"Str":"uint64"}},{"Zid":1,"FieldGoName":"Str","FieldTagName":"Str","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"},"OmitEmpty":true},{"Zid":2,"FieldGoName":"Domain","FieldTagName":"Domain","FieldTypeStr":"*Ztype","FieldCategory":28,"FieldFullType":{"Kind":28,"Str":"Pointer","Domain":{"Kind":22,"Str":"Ztype"}},"OmitEmpty":true},{"Zid":3,"FieldGoName":"Range","FieldTagName":"Range","FieldTypeStr":"*Ztype","FieldCategory":28,"FieldFullType":{"Kind":28,"Str":"Pointer","Domain":{"Kind":22,"Str":"Ztype"}},"OmitEmpty":true}]},"Schema":{"StructName":"Schema","Fields":[{"Zid":0,"FieldGoName":"SourcePath","FieldTagName":"SourcePath","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"},"OmitEmpty":true},{"Zid":1,"FieldGoName":"SourcePackage","FieldTagName":"SourcePackage","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"},"OmitEmpty":true},{"Zid":2,"FieldGoName":"ZebraSchemaId","FieldTagName":"ZebraSchemaId","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"},"OmitEmpty":true},{"Zid":3,"FieldGoName":"Structs","FieldTagName":"Structs","FieldTypeStr":"map[string]*Struct","FieldCategory":24,"FieldFullType":{"Kind":24,"Str":"Map","Domain":{"Kind":2,"Str":"string"},"Range":{"Kind":28,"Str":"Pointer","Domain":{"Kind":25,"Str":"Struct"}}},"OmitEmpty":true},{"Zid":4,"FieldGoName":"Imports","FieldTagName":"Imports","FieldTypeStr":"[]string","FieldCategory":26,"FieldFullType":{"Kind":26,"Str":"Slice","Domain":{"Kind":2,"Str":"string"}},"OmitEmpty":true}]},"Struct":{"StructName":"Struct","Fields":[{"Zid":0,"FieldGoName":"StructName","FieldTagName":"StructName","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"},"OmitEmpty":true},{"Zid":1,"FieldGoName":"Fields","FieldTagName":"Fields","FieldTypeStr":"[]Field","FieldCategory":26,"FieldFullType":{"Kind":26,"Str":"Slice","Domain":{"Kind":22,"Str":"Field"}},"OmitEmpty":true}]},"Field":{"StructName":"Field","Fields":[{"Zid":0,"FieldGoName":"Zid","FieldTagName":"Zid","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"}},{"Zid":1,"FieldGoName":"FieldGoName","FieldTagName":"FieldGoName","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":2,"FieldGoName":"FieldTagName","FieldTagName":"FieldTagName","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"},"OmitEmpty":true},{"Zid":3,"FieldGoName":"FieldTypeStr","FieldTagName":"FieldTypeStr","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"},"OmitEmpty":true},{"Zid":4,"FieldGoName":"FieldCategory","FieldTagName":"FieldCategory","FieldTypeStr":"Zkind","FieldCategory":23,"FieldPrimitive":11,"FieldFullType":{"Kind":11,"Str":"uint64"},"OmitEmpty":true},{"Zid":5,"FieldGoName":"FieldPrimitive","FieldTagName":"FieldPrimitive","FieldTypeStr":"Zkind","FieldCategory":23,"FieldPrimitive":11,"FieldFullType":{"Kind":11,"Str":"uint64"},"OmitEmpty":true},{"Zid":6,"FieldGoName":"FieldFullType","FieldTagName":"FieldFullType","FieldTypeStr":"*Ztype","FieldCategory":28,"FieldFullType":{"Kind":28,"Str":"Pointer","Domain":{"Kind":22,"Str":"Ztype"}},"OmitEmpty":true},{"Zid":7,"FieldGoName":"OmitEmpty","FieldTagName":"OmitEmpty","FieldTypeStr":"bool","FieldCategory":23,"FieldPrimitive":18,"FieldFullType":{"Kind":18,"Str":"bool"},"OmitEmpty":true},{"Zid":8,"FieldGoName":"Skip","FieldTagName":"Skip","FieldTypeStr":"bool","FieldCategory":23,"FieldPrimitive":18,"FieldFullType":{"Kind":18,"Str":"bool"},"OmitEmpty":true},{"Zid":9,"FieldGoName":"Deprecated","FieldTagName":"Deprecated","FieldTypeStr":"bool","FieldCategory":23,"FieldPrimitive":18,"FieldFullType":{"Kind":18,"Str":"bool"},"OmitEmpty":true},{"Zid":10,"FieldGoName":"ShowZero","FieldTagName":"ShowZero","FieldTypeStr":"bool","FieldCategory":23,"FieldPrimitive":18,"FieldFullType":{"Kind":18,"Str":"bool"},"OmitEmpty":true}]}}}`)
}

// ZebraZebraSchemaInJsonPretty provides the ZebraPack Schema in pretty JSON format, length 11643 bytes
func (FileZebra_zebra_go) ZebraZebraSchemaInJsonPretty() []byte {
	return []byte(`{
    "SourcePath": "zebra/zebra.go",
    "SourcePackage": "zebra",
    "ZebraSchemaId": 463621516989988,
    "Structs": {
        "Ztype": {
            "StructName": "Ztype",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "Kind",
                    "FieldTagName": "Kind",
                    "FieldTypeStr": "Zkind",
                    "FieldCategory": 23,
                    "FieldPrimitive": 11,
                    "FieldFullType": {
                        "Kind": 11,
                        "Str": "uint64"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "Str",
                    "FieldTagName": "Str",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 2,
                    "FieldGoName": "Domain",
                    "FieldTagName": "Domain",
                    "FieldTypeStr": "*Ztype",
                    "FieldCategory": 28,
                    "FieldFullType": {
                        "Kind": 28,
                        "Str": "Pointer",
                        "Domain": {
                            "Kind": 22,
                            "Str": "Ztype"
                        }
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 3,
                    "FieldGoName": "Range",
                    "FieldTagName": "Range",
                    "FieldTypeStr": "*Ztype",
                    "FieldCategory": 28,
                    "FieldFullType": {
                        "Kind": 28,
                        "Str": "Pointer",
                        "Domain": {
                            "Kind": 22,
                            "Str": "Ztype"
                        }
                    },
                    "OmitEmpty": true
                }
            ]
        },
        "Schema": {
            "StructName": "Schema",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "SourcePath",
                    "FieldTagName": "SourcePath",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 1,
                    "FieldGoName": "SourcePackage",
                    "FieldTagName": "SourcePackage",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 2,
                    "FieldGoName": "ZebraSchemaId",
                    "FieldTagName": "ZebraSchemaId",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 3,
                    "FieldGoName": "Structs",
                    "FieldTagName": "Structs",
                    "FieldTypeStr": "map[string]*Struct",
                    "FieldCategory": 24,
                    "FieldFullType": {
                        "Kind": 24,
                        "Str": "Map",
                        "Domain": {
                            "Kind": 2,
                            "Str": "string"
                        },
                        "Range": {
                            "Kind": 28,
                            "Str": "Pointer",
                            "Domain": {
                                "Kind": 25,
                                "Str": "Struct"
                            }
                        }
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 4,
                    "FieldGoName": "Imports",
                    "FieldTagName": "Imports",
                    "FieldTypeStr": "[]string",
                    "FieldCategory": 26,
                    "FieldFullType": {
                        "Kind": 26,
                        "Str": "Slice",
                        "Domain": {
                            "Kind": 2,
                            "Str": "string"
                        }
                    },
                    "OmitEmpty": true
                }
            ]
        },
        "Struct": {
            "StructName": "Struct",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "StructName",
                    "FieldTagName": "StructName",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 1,
                    "FieldGoName": "Fields",
                    "FieldTagName": "Fields",
                    "FieldTypeStr": "[]Field",
                    "FieldCategory": 26,
                    "FieldFullType": {
                        "Kind": 26,
                        "Str": "Slice",
                        "Domain": {
                            "Kind": 22,
                            "Str": "Field"
                        }
                    },
                    "OmitEmpty": true
                }
            ]
        },
        "Field": {
            "StructName": "Field",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "Zid",
                    "FieldTagName": "Zid",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "FieldGoName",
                    "FieldTagName": "FieldGoName",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "FieldTagName",
                    "FieldTagName": "FieldTagName",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 3,
                    "FieldGoName": "FieldTypeStr",
                    "FieldTagName": "FieldTypeStr",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 4,
                    "FieldGoName": "FieldCategory",
                    "FieldTagName": "FieldCategory",
                    "FieldTypeStr": "Zkind",
                    "FieldCategory": 23,
                    "FieldPrimitive": 11,
                    "FieldFullType": {
                        "Kind": 11,
                        "Str": "uint64"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 5,
                    "FieldGoName": "FieldPrimitive",
                    "FieldTagName": "FieldPrimitive",
                    "FieldTypeStr": "Zkind",
                    "FieldCategory": 23,
                    "FieldPrimitive": 11,
                    "FieldFullType": {
                        "Kind": 11,
                        "Str": "uint64"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 6,
                    "FieldGoName": "FieldFullType",
                    "FieldTagName": "FieldFullType",
                    "FieldTypeStr": "*Ztype",
                    "FieldCategory": 28,
                    "FieldFullType": {
                        "Kind": 28,
                        "Str": "Pointer",
                        "Domain": {
                            "Kind": 22,
                            "Str": "Ztype"
                        }
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 7,
                    "FieldGoName": "OmitEmpty",
                    "FieldTagName": "OmitEmpty",
                    "FieldTypeStr": "bool",
                    "FieldCategory": 23,
                    "FieldPrimitive": 18,
                    "FieldFullType": {
                        "Kind": 18,
                        "Str": "bool"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 8,
                    "FieldGoName": "Skip",
                    "FieldTagName": "Skip",
                    "FieldTypeStr": "bool",
                    "FieldCategory": 23,
                    "FieldPrimitive": 18,
                    "FieldFullType": {
                        "Kind": 18,
                        "Str": "bool"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 9,
                    "FieldGoName": "Deprecated",
                    "FieldTagName": "Deprecated",
                    "FieldTypeStr": "bool",
                    "FieldCategory": 23,
                    "FieldPrimitive": 18,
                    "FieldFullType": {
                        "Kind": 18,
                        "Str": "bool"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 10,
                    "FieldGoName": "ShowZero",
                    "FieldTagName": "ShowZero",
                    "FieldTypeStr": "bool",
                    "FieldCategory": 23,
                    "FieldPrimitive": 18,
                    "FieldFullType": {
                        "Kind": 18,
                        "Str": "bool"
                    },
                    "OmitEmpty": true
                }
            ]
        }
    }
}`)
}
